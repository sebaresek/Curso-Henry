>>> CLOSURES : son funciones que retornan otras funciones. 
las cuales pueden acceder al contexto de su funcion padre.

function saludar (saludo){
    return function (nombre){
        console.log(saludo + ' ' + nombre)
    }
}

var saludarHola = saludar('Hola')
                // function (nombre){
        // console.log(saludo + ' ' + nombre)}

saludarHola('Fran')         // MUESTRA >>> HOLA FRAN

>>> OTRO EJEMPLO <<<

var creaFunction = function(){
  var array = [];  // [function(){console.log(i); }, function(){console.log(i); }, function(){console.log(i); }]
  
  for( let i = 0; i < 3; i++ ){
    array.push(
      function(){console.log(i); })
  }
  return array
}

var funciones = creaFunction() // [function(){console.log(i); }, function(){console.log(i); }, function(){console.log(i); }]

funciones[0]()      // MUESTRA = 0
funciones[2]()      // MUESTRA = 2


BIND - CALL - APPLY : 
son metodos que nos permite manipular la direccion en la que apunta 
la propiedad this.

>>> BIND 

let persona = {
    nombre: 'Alex'
    apellido: 'Bris'
}
let logNombre = fuction(){
    console.log(this.nombre);
}

let logNombrePersona = logNombre.bind(persona)


>>> CALL
este recibe el this como parametro, sin mas

let persona = {
    nombre: 'Alex'
    apellido: 'Bris'
}
let logNombre = fuction(){
    console.log(this.nombre);
}

logNombre.call(persona) //MUESTRA : Alex


>>> APPLY 
este puede recibir 2 parametros (lo cual es opcional), el this y un array 
(la cual va a pasar como argumentos a la funcion)

let persona = {
    nombre: 'Alex',
    apellido: 'Bris'
}
let logNombre = function(arg1, arg2){
    console.log(this.nombre);        //MUESTRA : Hola Alex como estas ?
}

logNombre.appy(persona, ['Hola', 'como estas ?'])