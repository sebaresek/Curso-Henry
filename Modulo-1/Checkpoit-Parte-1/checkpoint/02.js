const Stack = require('../DS').Stack;

/* ‚ö†Ô∏è NO MODIFICAR NADA POR ENCIMA DE ESTA L√çNEA ‚ö†Ô∏è

2Ô∏è‚É£ ***** EJERCICIO 2 STACK ***** - prepararMen√∫() 2Ô∏è‚É£

Un barman desea preparar un men√∫ de tragos utilizando diferentes bebidas alcoh√≥licas y tiempos de 
preparaci√≥n. Hay lista de tragos y una lista de tiempos de preparaci√≥n correspondientes. Para esto tendr√°s 
que implementar la funci√≥n prepararMen√∫(), la cual recibir√° por par√°metros un arreglo de tragos, un arreglo
de tiempos, y un tercer p√°rametro que es un n√∫mero indicando el tiempo l√≠mite.

Ayuda al barman a preparar el men√∫ de tragos y tiempos de preparaci√≥n en orden inverso, ¬°y con una 
restricci√≥n adicional! ‚û° S√≥lo puede utilizar cada trago si su tiempo de preparaci√≥n es menor al tiempo 
determinado. Deber√°s retornar un objeto el cual contendr√° dos propiedades:
  - una con el stack de tragos.
  - otra con el stack de tiempos.

üìù EJEMPLO üìù
(INPUT) ‚û°
  tragos:["Ron", "Vodka", "Whisky", "Tequila"],
  Tiempos de preparaci√≥n: [5,3,8,10],
  tiempoLimite: 7

guardarTragos(tragos,TiemposDePreparaci√≥n, tiempoLimite) ‚û° (OUTPUT)
{
  tragos: Stack: ['Vodka', 'Ron'],
  tiempos: Stack [3, 5]
};

REQUISITOS
  üü¢ Respetar el principio de LIFO que tienen los Stacks.
  üü¢ Retornar un objeto que contenga:
  - una propiedad "tragos" que sea un Stack que contenga los tragos menores al tiempo l√≠mite.
  - una propiedad "tiempos" que sea un Stack que contenga los tiempos menores al tiempo l√≠mite.
*/

function prepararMen√∫(tragos, tiempos, tiempoLimite) {
   // Tu c√≥digo aqu√≠:
}

// ‚ö†Ô∏è NO MODIFICAR NADA POR DEBAJO DE ESTA L√çNEA ‚ö†Ô∏è
module.exports = prepararMen√∫;
