const { LinkedList } = require('../DS');

/* ‚ö†Ô∏è NO MODIFICAR NADA POR ENCIMA DE ESTA L√çNEA ‚ö†Ô∏è

7Ô∏è‚É£ ***** EJERCICIO 7 - LinkedList ***** - encontrarPedidoRepetido() 7Ô∏è‚É£

Estamos trabajando en un bar y hay pedidos repetidos. Debemos realizar un algoritmo que nos ayude a 
encontrar dichos pedidos y guardarlos en una nueva LinkedList.
Para esto nos ayudaremos del nombre que figura en el ticket, he iremos comparando con el nombre que 
nos pasan por par√°metro.

‚õîÔ∏è IMPORTANTE ‚õîÔ∏è
1) Tienes que retornar una nueva LinkedList con los elementos que coincidan con el n√∫mero recibido por par√°metro.
2) Si no se encuentran elementos con el mismo nombre, debes retornar false.
3) No te olvides de comparar el nombre que figura en cada ticket con el nombre que te pasan por props y no el trago.

üìù EJEMPLO üìù
LISTA ---> Head ‚û° ({nombre: "Franco", trago: "Fernet"}) ‚û° ({nombre: "Martin", trago: "Gancia"}) ‚û° ({nombre: "Franco", trago: "Fernet"}) ‚û° ({nombre: "Mateo", trago: "Cerveza Corona"}) ‚û° ({nombre: "Nico", trago: "Negroni"}) ‚û° ({nombre: "Ale", trago: "Cerveza IPA"})
INPUT ---> "Franco"
OUTPUT --> Head ‚û° ({nombre: "Franco", trago: "Fernet"}) ‚û° ({nombre: "Franco", trago: "Fernet"})
*/

LinkedList.prototype.encontrarPedidoRepetido = function (nombre) {
   // Tu c√≥digo aqu√≠:
};

// ‚ö†Ô∏è NO MODIFICAR NADA DEBAJO DE ESTA LINEA ‚ö†Ô∏è
module.exports = LinkedList;
