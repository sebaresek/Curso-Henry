const { BinarySearchTree } = require('../DS');

/*  ‚ö†Ô∏è NO MODIFICAR NADA POR ENCIMA DE ESTA L√çNEA ‚ö†Ô∏è

9Ô∏è‚É£ ***** EJERCICIO 9 BINARYSEARCHTREE ***** - consultarTragos() 9Ô∏è‚É£

Eres el barman en un evento y un cliente se acerca a la barra a consultar qu√© tragos podr√≠a comprar con el 
efectivo que dispone. Deber√°s devolver seg√∫n el efectivo disponible los tragos de la barra que salgan igual
o mas baratos.
Para esto tendr√°s que agregar al prototype de BinarySearchTree el m√©todo üçπconsultarTragos()üçπ, el cual
recibir√° por par√°metro un n√∫mero que representar√° el efectivo disponible para comprar tragos.

üìù EJEMPLO üìù
Dado el siguiente √°rbol - (INPUT) ‚û° 
                          { nombre: "Gancia", precio: 400 }
                          /                             \
           {nombre: "Fernet", precio: 500}              {nombre: "Malibu", precio: 400}
                       /                               /                            \
           {nombre: "Agua", precio: 200}    {nombre: "Long Island", precio: 400}     {nombre: Martini, precio: 800}
                          \                                                           \
                {nombre: "Bailey", precio: 900}                                     {nombre: "Tom Collins", precio: 1000}
                           \
                {nombre: "Caipi", precio: 700}


BinarySearchTree.consultarTragos(400) ‚û° (OUTPUT)
  ["Gancia","Agua","Malibu","Long Island"]

BinarySearchTree.consultarTragos(Camiseta) ‚û° (OUTPUT)
  ["Camiseta", "Camiseta"]

REQUISITOS
  üü¢ Recorrer el √°rbol y devolver en un arreglo con los tragos disponibles.

‚õîÔ∏è ACLARACI√ìN: Dentro del √°rbol se encuentran objetos, tal como lo muestra el ejemplo m√°s arriba.
‚õîÔ∏è TIP: puedes utilizar default parameters para ayudarte.
*/

BinarySearchTree.prototype.consultarTragos = function (efectivo) {
   // Tu c√≥digo aqu√≠:
   
};

// ‚ö†Ô∏è NO MODIFICAR NADA POR DEBAJO DE ESTA L√çNEA ‚ö†Ô∏è
module.exports = {
   BinarySearchTree,
};
